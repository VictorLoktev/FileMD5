<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help" xml:space="preserve">
    <value>FileMD5 считает хеши файлов по алгоритму MD5, посчитанные хеши сохраняются
в исходные файлы в видео дополнительных потоков (поддерживается только для NTFS).
При проверке целостности файла проверяется наличие хеша MD5
в сохраненном ранее специальном потоке, сохраненного ранее
в отдельном потоке в файле; при отсутствии сохраненного ранее хеша MD5
или при его отличии от текущего рассчитанного хеша выдается ошибка.

Запуск программы:
FileMD5 [ключ1] [...ключN] [folder or file 1] [...folder or file N]"
folder or file - название папки для обработки всех входящих в нее файлов
                 или маска файлов, например *.jpg, для обработки
                 отдельных файлов; может содержать полный или краткий путь
Ключи:
  -?      - текущая справка о программе
  -h      - текущая справка о программе
  -help   - текущая справка о программе
  -md5    - посчитать хеш файла по алгоритму MD5 и сохранить его;
            если указан параметр -extract, хеш записывается в файл,
            (см. параметр -extract), иначе хеш пишется
            в исходный файл дополнительным потоком (только для NTFS)
  -check  - посчитать хеш файла по алгоритму MD5
            и сравнить с ранее сохраненным значением;
            ошибки выдаются в случаях:
            если сохраненного ранее хеша нет
			(например, файл подвергся правке),
            если посчитанный хеш не совпадает с ранее сохраненным значением
  -remove - по умолчанию, удаляет из файла
            специальный поток с сохраненным хешем
  -ok+    - по умолчанию, для файлов без ошибок выдает сообщение
  -ok-    - для файлов без ошибок не выдает никаких сообщений;
            рекомендуется использовать,
			когда нужно увидеть только плохие файлы
  -offline или -off
          - для файлов с ошибками устанавливает атрибут Offline;
            в Проводнике (Windows Explorer) иконка файла
			отображается с крестиком с левом-нижнем углу
  -rename или -ren
          - для файлов с ошибками добавляет в название {0}
  -s или -r
          - рекуррентное выполнение для всех вложенных поддиректорий
  -pause  - пауза на ввод любого символа после выполнения всей работы
  -beep или -bell
          - звонок после выполнения всей работы
  -extract &lt;folder&gt; - в директории folder создает файл,
            одноименный проверяемому с расширением .MD5,
			куда записывается посчитанный хеш файла; в директории folder
			дублируется оригинальная структура вложенных поддиректорий
  -do &lt;folder or mask&gt; - если название обрабатываемой директории
            начинается с минуса, перед ней надо поставить -do
Ключи -md5, -check и -remove взаимоисключающие,
если ничего не указано, выполняется -check</value>
  </data>
</root>
